package main

import (
	"context"
	"encoding/binary"
	"fmt"
	"log"
	"os/exec"
	"time"

	pb "matteo_solana/proto"

	"github.com/gagliardetto/solana-go"
	"github.com/gagliardetto/solana-go/rpc"
	"github.com/gagliardetto/solana-go/rpc/ws"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/grpc/encoding/gzip"
	"google.golang.org/grpc/keepalive"
)

const (
	// BuyDiscriminator = 0x66063d1201daeaea // —Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
	BuyDiscriminator  uint64 = 0xeaebda01123d0666 // –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –±–∞–π—Ç–æ–≤
	LAMPORTS_PER_SOL         = 1_000_000_000
	MinPurchaseAmount        = 1.9 * float64(LAMPORTS_PER_SOL)
)

var (
	pumpProgram = solana.MustPublicKeyFromBase58("6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P")
	endpoint    = "fra.pixellabz.io:9000"
	kacp        = keepalive.ClientParameters{
		Time:                10 * time.Second,
		Timeout:             time.Second,
		PermitWithoutStream: true,
	}
)

type PurchaseMonitor struct {
	client     pb.GeyserClient
	rpcClient  *rpc.Client
	wsClient   *ws.Client
	walletAddr solana.PublicKey
}

func NewPurchaseMonitor(walletAddr solana.PublicKey) (*PurchaseMonitor, error) {
	log.Println("–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞...")

	// –°–æ–∑–¥–∞–µ–º gRPC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	log.Printf("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É %s...", endpoint)
	conn, err := grpc.Dial(endpoint, grpc.WithTransportCredentials(insecure.NewCredentials()), grpc.WithKeepaliveParams(kacp), grpc.WithDefaultCallOptions(grpc.UseCompressor(gzip.Name)))
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É: %w", err)
	}
	log.Println("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É")

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
	log.Println("–°–æ–∑–¥–∞–µ–º RPC –∫–ª–∏–µ–Ω—Ç...")
	client := pb.NewGeyserClient(conn)
	rpcClient := rpc.New("https://api.mainnet-beta.solana.com")

	log.Println("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ websocket...")
	wsClient, err := ws.Connect(context.Background(), "wss://api.mainnet-beta.solana.com")
	if err != nil {
		conn.Close()
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ websocket: %w", err)
	}
	log.Println("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ websocket")

	return &PurchaseMonitor{
		client:     client,
		rpcClient:  rpcClient,
		wsClient:   wsClient,
		walletAddr: walletAddr,
	}, nil
}

func (pm *PurchaseMonitor) Start() error {
	log.Println("–ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")

	// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Geyser
	var subscription pb.SubscribeRequest
	subscription.Transactions = make(map[string]*pb.SubscribeRequestFilterTransactions)
	f := false
	subscription.Transactions["pump_filter"] = &pb.SubscribeRequestFilterTransactions{
		AccountInclude: []string{pm.walletAddr.String()},
		Failed:         &f,
	}
	subscription.Commitment = pb.CommitmentLevel_PROCESSED.Enum()

	log.Println("–°–æ–∑–¥–∞–µ–º gRPC stream...")
	stream, err := pm.client.Subscribe(context.Background())
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É (–≤–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à IP –Ω–µ –≤ whitelist): %w", err)
	}
	log.Println("–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ gRPC stream")

	log.Println("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É...")
	if err := stream.Send(&subscription); err != nil {
		return fmt.Errorf("failed to send subscription: %w", err)
	}
	log.Println("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É")
	log.Println("–û–∂–∏–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")

	for {
		resp, err := stream.Recv()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: %v\n", err)
			time.Sleep(time.Second)
			continue
		}

		if tx := resp.GetTransaction(); tx != nil {
			log.Println("–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º...")
			message := tx.GetTransaction().GetTransaction().GetMessage()
			if message == nil {
				continue
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—à –∫–æ—à–µ–ª–µ–∫
			containsOurWallet := false
			for _, key := range message.AccountKeys {
				if solana.PublicKeyFromBytes(key).Equals(pm.walletAddr) {
					containsOurWallet = true
					break
				}
			}

			if !containsOurWallet {
				log.Printf("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é - –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—à –∫–æ—à–µ–ª–µ–∫ %s", pm.walletAddr.String())
				continue
			}

			log.Printf("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—à –∫–æ—à–µ–ª–µ–∫ %s, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏...", pm.walletAddr.String())

			for _, ix := range message.Instructions {
				program_idx := ix.ProgramIdIndex
				if int(program_idx) >= len(message.AccountKeys) {
					continue
				}
				program_id := message.AccountKeys[program_idx]
				if !solana.PublicKeyFromBytes(program_id).Equals(pumpProgram) {
					continue
				}

				log.Printf("–ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã pump.fun")
				log.Printf("–î–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (hex): %x", ix.Data)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ buy
				if len(ix.Data) < 8 {
					log.Println("–î–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –¥–ª—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä–∞")
					continue
				}
				discriminator := binary.LittleEndian.Uint64(ix.Data[:8])
				log.Printf("–ù–∞–π–¥–µ–Ω–Ω—ã–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä: %x", discriminator)
				log.Printf("–û–∂–∏–¥–∞–µ–º—ã–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä: %x", BuyDiscriminator)

				if discriminator != BuyDiscriminator {
					log.Printf("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä: %x (–æ–∂–∏–¥–∞–ª—Å—è: %x)", discriminator, BuyDiscriminator)
					continue
				}

				log.Println("–ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è buy")

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç –Ω–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
				user_idx := ix.Accounts[6]
				if int(user_idx) >= len(message.AccountKeys) {
					log.Println("–ò–Ω–¥–µ–∫—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
					continue
				}
				user_pk := solana.PublicKeyFromBytes(message.AccountKeys[user_idx])
				if !user_pk.Equals(pm.walletAddr) {
					log.Printf("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç –¥—Ä—É–≥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞: %s (–æ–∂–∏–¥–∞–ª—Å—è: %s)", user_pk.String(), pm.walletAddr.String())
					continue
				}

				log.Println("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç –Ω–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞")

				// –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏
				if len(ix.Data) < 16 {
					log.Println("–î–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –¥–ª—è —Å—É–º–º—ã")
					continue
				}
				purchaseAmount := binary.LittleEndian.Uint64(ix.Data[8:16])
				amountInSol := float64(purchaseAmount) / float64(LAMPORTS_PER_SOL)
				log.Printf("–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: %.9f SOL (–≤ lamports: %d)", amountInSol, purchaseAmount)
				log.Printf("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç—Ä–µ–±—É–µ–º–∞—è —Å—É–º–º–∞: %.9f SOL (–≤ lamports: %d)", MinPurchaseAmount/float64(LAMPORTS_PER_SOL), MinPurchaseAmount)

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ >= 1.9 SOL
				if float64(purchaseAmount) >= MinPurchaseAmount {
					log.Printf("üéØ –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ü–û–ö–£–ü–ö–ê! –°—É–º–º–∞: %.9f SOL (>= %.9f SOL)\n", amountInSol, MinPurchaseAmount/float64(LAMPORTS_PER_SOL))
					log.Printf("üîî –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª...")

					// –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª
					cmd := exec.Command("cmd", "/C", "start", "sistema-poiska-pidorasov.wav")
					if err := cmd.Run(); err != nil {
						log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞: %v\n", err)
					} else {
						log.Printf("‚úÖ –ó–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω")
					}
				} else {
					log.Printf("‚ÑπÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞ –Ω–∞ —Å—É–º–º—É %.9f SOL (–º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π %.9f SOL)\n",
						amountInSol, MinPurchaseAmount/float64(LAMPORTS_PER_SOL))
				}
			}
		}
	}
}

func main() {
	// –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
	walletAddr := solana.MustPublicKeyFromBase58("FgWxH43h72i43vQwaSo8Zd43nG9Eh5ErrG2ZkNShzk44")
	monitor, err := NewPurchaseMonitor(walletAddr)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞: %v", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
	if err := monitor.Start(); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: %v", err)
	}
}
